

/******  20132720 **********/

#include<stdio.h>

int n,m;
int bead[301],sum[301];
int d[301][301],v[301][301];

int max(int x, int y){
	if(x>y) return x;
	return y;
}

void traceback(int i, int j){
	if(i==0) return;
	traceback(i-1,v[i][j]);
	printf("%d ",j-v[i][j]);
}

int main(){
	int i,j,k,temp;
	scanf("%d%d",&n,&m);
	for(i=1;i<=n;i++) scanf("%d",&bead[i]);
	
	sum[0]=0;
	for(i=1;i<=n;i++) sum[i] = sum[i-1] + bead[i];
	
	for(i=1;i<=n;i++){ d[1][i] = sum[i]; v[1][i] = 0; }
	for(i=2;i<=m;i++){
		for(j=i;j<=n;j++){
			d[i][j] = max(d[i-1][j-1], bead[j]);
			v[i][j] = j-1;
			for(k=i;k<j;k++){
				temp = max(d[i-1][k-1], sum[j]-sum[k-1]);
				if(temp < d[i][j]){
					d[i][j] = temp;
					v[i][j] = k-1;
				}
			}
		}
	}

	printf("%d\n",d[m][n]);
	traceback(m,n);
	printf("\n");
	return 0;
}



/******  20142426 **********/

#include <stdio.h>
#include <stack>
std::stack <int> stack;
int P[302][302];
int T[302][302];
int max(int a,int b) {
	if (a > b) return a;
	else return b;
}

int main() {
	int n, m,a;
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; i++){
		scanf("%d", &a);
		T[1][i] = a + T[1][i-1];
	}
	for (int i = 2; i <= m; i++) {
		for (int j = i; j <= n; j++) {
			for (int k = 1; i - 1 <= j - k; k++) {
				if (k == 1) { 
					P[i][j] = k;
					T[i][j] = max(T[i - 1][j - k], T[1][j] - T[1][j - k]); }
				else if (T[i][j] > max(T[i - 1][j - k], T[1][j] - T[1][j - k])) {
					P[i][j] = k;
					T[i][j] = max(T[i - 1][j - k], T[1][j] - T[1][j - k]);
				}
			}
		}
	}
	printf("%d\n", T[m][n]);
	a = n;
	for (int i = m; i >=1; i--) {
		if(P[i][a]!=0)	stack.push(P[i][a]);
		else stack.push(a);
		a -= P[i][a];
	}

	while (!stack.empty()) {
		printf("%d ", stack.top());
		stack.pop();
	}
}



/******  20122387 **********/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include<algorithm>
#include<iostream>

using namespace std;

int bead[301], dividedBead[301];
int n, m;

bool possibilityCheck(int maxSize);

int parametric()
{
	int low = 1, high = 90001;
	int mid;

	while (low <= high)
	{
		mid = (low + high) / 2;

		if (possibilityCheck(mid))
			high = mid - 1;
		else
			low = mid + 1;
	}
	return low;
}

bool possibilityCheck(int maxSize)
{
	int container = 1, sum = 0;
	int check = 1;

	for (int i = 0; i < n; i++)
	{
		if (container > m)
		{
			check = 0;
			break;
		}

		if (sum + bead[i] <= maxSize)
			sum += bead[i];
		else
		{
			container++;
			sum = 0;
			i--;
		}
	}
	return check;
}

int main()
{
	int result, cur = 0, count = 0, items = 0;
	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++)
		scanf("%d", &bead[i]);

	result = parametric();
	printf("%d\n", result);

	for (int i = 0; i < n; i++)
	{
		cur += bead[i];
		count++;

		if (cur > result)
		{
			i--;
			count--;
			dividedBead[items++] = count;
			count = 0;
			cur = 0;
		}
	}
	dividedBead[items] = count;

	for (int i = 0; i < m; i++)
	{
		printf("%d ", dividedBead[i]);
	}

	return 0;
}


