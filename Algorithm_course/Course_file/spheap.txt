

/*****  20112506 *********/


#include <vector>
#include <queue>
#include <stdio.h>
using namespace std;

int board[201][201];	// 맵의 최대크기 
int a, b; 				// 행렬의 크기 
int dy[4]={-1,1,0,0};	// y좌표로 움직일 수 있는 방향들 
int dx[4]={0,0,-1,1};	// x좌표로 움직일 수 있는 방향들 
int dist[201][201];


int minCost(int start_y, int start_x, int end_y, int end_x){
	
	for(int i=1; i<=a; ++i){	//모든 버텍스의 거리를 무한대로 초기화 
		for(int j=1; j<=b; ++j){
			dist[i][j] = 0x7ffffff;
		}
	}
	
	dist[start_y][start_x] = board[start_y][start_x];//출발점 버텍스의 거리만 0으로 초기화 
	
	priority_queue<pair<int, pair<int, int> > > pq;		//우선순위 큐 생성. (int, pair(int, int)) 형태를 넣는다. 
	pq.push(make_pair(-dist[start_y][start_x], make_pair(start_y, start_x)));		//출발점 버텍스를 큐에 넣는다. 
	
	while(!pq.empty()){				//*************큐가 empty할 때까지 반복한다************// 
		int cost = -pq.top().first;	//cost는 현재 버텍스까지의 거리 
		pair<int, int> here = pq.top().second;	//here는 현재 버텍스의 좌표 
		pq.pop();		//가장 적은 거리를 갖는 버텍스를 pop한다. 
		
		if(dist[here.first][here.second] < cost) continue;
		
		for(int i=0; i<4; ++i){			//4방향의 인접버텍스에 대해 거리를 조사한다 
				pair<int, int> there = make_pair(here.first + dy[i], here.second + dx[i]);//there는 here의 인접버텍스  좌표
				if(there.first<=0 || there.first>a || there.second<=0 || there.second>b) continue; //맵을 벗어나는 경우의 처리 
				int nextDist = cost + board[there.first][there.second];	//nextDist는 there까지의 거리 
			    
				if(dist[there.first][there.second] > nextDist){  //nextDist가 더 적으면 거리를 갱신한다. 
					dist[there.first][there.second] = nextDist;
					pq.push(make_pair(-nextDist, make_pair(there.first, there.second)));
				}
			}
		}
	return dist[end_y][end_x];
}

int main(void){
	/**************입력 부**************/ 
	scanf("%d%d", &a, &b);
	for(int i=1; i<=a; ++i){
		for(int j=1; j<=b; ++j){
			scanf("%d", &board[i][j]);
		}
	}
	int start_y, start_x;
	int end_y, end_x;
	scanf("%d%d", &start_y, &start_x);
	scanf("%d%d", &end_y, &end_x);
	/***********************************/

	printf("%d", minCost(start_y, start_x, end_y, end_x));	
}



/*****  20142291 *********/

#include <iostream>
#include <queue>

using namespace std;

struct point {
    int x;
    int y;
    int value;
    bool ck = false;
};

bool operator<(point t, point u) {
    return t.value > u.value;
}

point ary[210][210];


int main1() {

    priority_queue<point> q;

    int h, w;
    int startx, starty, endx, endy;


    // y를 가로축  w  [][*]
    // x를 세로축  h  [*][]

    cin >> h >> w;
    for (int i = 1; i <= h; i++)
        for (int j = 1; j <= w; j++) {
            cin >> ary[i][j].value;
            ary[i][j].x = i;
            ary[i][j].y = j;
            ary[i][j].ck = false;
        }
    // 초기화 작업 끝
    cin >> startx >> starty >> endx >> endy;

    ary[startx][starty].ck = true;
    q.push(ary[startx][starty]);


    int count = 0;
    while(!q.empty()) {
        point p = q.top();
        q.pop();
        p.ck = true;
        point t1 = ary[p.x - 1][p.y];
        point t2 = ary[p.x + 1][p.y];
        point t3 = ary[p.x][p.y - 1];
        point t4 = ary[p.x][p.y + 1];
        //cout << p.value << endl;
        if ((p.x != 1) && (t1.ck == false)) {
            t1.value = t1.value + p.value;
            t1.ck = true;
            q.push(t1);
        }
        if ((p.x != h) && (t2.ck == false)) {
            t2.value = t2.value + p.value;  // 내려가는 것
            t2.ck = true;
            q.push(t2);
        }
        if ((p.y != 1) && (t3.ck == false)) {
            t3.value = t2.value + p.value;
            t3.ck = true;
            q.push(t3);
        }
        if ((p.y != w) && (t4.ck == false)) {
            t4.value = t4.value + p.value;
            t4.ck = true;
            q.push(t4);
        }

    }

    cout << ary[endx][endy].value;

}


